
V_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010dc  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080012a4  080012a4  000022a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012b4  080012b4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080012b4  080012b4  000022b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012bc  080012bc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012bc  080012bc  000022bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012c0  080012c0  000022c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080012c4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080012d0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080012d0  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031b6  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c26  00000000  00000000  000061f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  00006e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a5  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233e2  00000000  00000000  0000746d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003eab  00000000  00000000  0002a84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc677  00000000  00000000  0002e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ad71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d3c  00000000  00000000  0010adb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0010baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800128c 	.word	0x0800128c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800128c 	.word	0x0800128c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 f901 	bl	8000702 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f802 	bl	8000508 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <main+0xc>

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fe8c 	bl	8001234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	@ (80005d0 <SystemClock_Config+0xc8>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	@ 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <SystemClock_Config+0xc8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000544:	4b23      	ldr	r3, [pc, #140]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800054c:	4a21      	ldr	r2, [pc, #132]	@ (80005d4 <SystemClock_Config+0xcc>)
 800054e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000574:	230a      	movs	r3, #10
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000578:	23d2      	movs	r3, #210	@ 0xd2
 800057a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000580:	2302      	movs	r3, #2
 8000582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f9fd 	bl	8000988 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000594:	f000 f820 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2105      	movs	r1, #5
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fc8a 	bl	8000ed0 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005c2:	f000 f809 	bl	80005d8 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	@ 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <Error_Handler+0x8>

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_MspInit+0x44>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <HAL_MspInit+0x44>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <HAL_MspInit+0x44>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000606:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <HAL_MspInit+0x44>)
 8000608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060c:	6453      	str	r3, [r2, #68]	@ 0x44
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_MspInit+0x44>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <NMI_Handler+0x4>

08000634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <MemManage_Handler+0x4>

08000644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <UsageFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 f87b 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <SystemInit+0x20>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <SystemInit+0x20>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006b4:	f7ff ffea 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	@ (80006fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80006de:	f000 fdb1 	bl	8001244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006e2:	f7ff ff09 	bl	80004f8 <main>
  bx  lr    
 80006e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f4:	080012c4 	.word	0x080012c4
  ldr r2, =_sbss
 80006f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006fc:	2000002c 	.word	0x2000002c

08000700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC_IRQHandler>

08000702 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000706:	2003      	movs	r0, #3
 8000708:	f000 f90a 	bl	8000920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f805 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000712:	f7ff ff67 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f917 	bl	800096e <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000758:	f000 f8ed 	bl	8000936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000028 	.word	0x20000028

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028

080007bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <__NVIC_SetPriorityGrouping+0x40>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ea:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <__NVIC_SetPriorityGrouping+0x40>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	60d3      	str	r3, [r2, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	05fa0000 	.word	0x05fa0000

08000804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <__NVIC_GetPriorityGrouping+0x18>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0307 	and.w	r3, r3, #7
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db0a      	blt.n	800084a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	490c      	ldr	r1, [pc, #48]	@ (800086c <__NVIC_SetPriority+0x4c>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	0112      	lsls	r2, r2, #4
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	440b      	add	r3, r1
 8000844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000848:	e00a      	b.n	8000860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4908      	ldr	r1, [pc, #32]	@ (8000870 <__NVIC_SetPriority+0x50>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	3b04      	subs	r3, #4
 8000858:	0112      	lsls	r2, r2, #4
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	440b      	add	r3, r1
 800085e:	761a      	strb	r2, [r3, #24]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000e100 	.word	0xe000e100
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	@ 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f1c3 0307 	rsb	r3, r3, #7
 800088e:	2b04      	cmp	r3, #4
 8000890:	bf28      	it	cs
 8000892:	2304      	movcs	r3, #4
 8000894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3304      	adds	r3, #4
 800089a:	2b06      	cmp	r3, #6
 800089c:	d902      	bls.n	80008a4 <NVIC_EncodePriority+0x30>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3b03      	subs	r3, #3
 80008a2:	e000      	b.n	80008a6 <NVIC_EncodePriority+0x32>
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43da      	mvns	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	43d9      	mvns	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	4313      	orrs	r3, r2
         );
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3724      	adds	r7, #36	@ 0x24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008ec:	d301      	bcc.n	80008f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00f      	b.n	8000912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <SysTick_Config+0x40>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fa:	210f      	movs	r1, #15
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000900:	f7ff ff8e 	bl	8000820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <SysTick_Config+0x40>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090a:	4b04      	ldr	r3, [pc, #16]	@ (800091c <SysTick_Config+0x40>)
 800090c:	2207      	movs	r2, #7
 800090e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	e000e010 	.word	0xe000e010

08000920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff47 	bl	80007bc <__NVIC_SetPriorityGrouping>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000948:	f7ff ff5c 	bl	8000804 <__NVIC_GetPriorityGrouping>
 800094c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	68b9      	ldr	r1, [r7, #8]
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f7ff ff8e 	bl	8000874 <NVIC_EncodePriority>
 8000958:	4602      	mov	r2, r0
 800095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff5d 	bl	8000820 <__NVIC_SetPriority>
}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ffb0 	bl	80008dc <SysTick_Config>
 800097c:	4603      	mov	r3, r0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e291      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 8087 	beq.w	8000aba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009ac:	4b96      	ldr	r3, [pc, #600]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f003 030c 	and.w	r3, r3, #12
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d00c      	beq.n	80009d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009b8:	4b93      	ldr	r3, [pc, #588]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f003 030c 	and.w	r3, r3, #12
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d112      	bne.n	80009ea <HAL_RCC_OscConfig+0x62>
 80009c4:	4b90      	ldr	r3, [pc, #576]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80009d0:	d10b      	bne.n	80009ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d2:	4b8d      	ldr	r3, [pc, #564]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d06c      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x130>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d168      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e26b      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009f2:	d106      	bne.n	8000a02 <HAL_RCC_OscConfig+0x7a>
 80009f4:	4b84      	ldr	r3, [pc, #528]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a83      	ldr	r2, [pc, #524]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 80009fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e02e      	b.n	8000a60 <HAL_RCC_OscConfig+0xd8>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10c      	bne.n	8000a24 <HAL_RCC_OscConfig+0x9c>
 8000a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	4b7c      	ldr	r3, [pc, #496]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a7b      	ldr	r2, [pc, #492]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	e01d      	b.n	8000a60 <HAL_RCC_OscConfig+0xd8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000a2c:	d10c      	bne.n	8000a48 <HAL_RCC_OscConfig+0xc0>
 8000a2e:	4b76      	ldr	r3, [pc, #472]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a75      	ldr	r2, [pc, #468]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	4b73      	ldr	r3, [pc, #460]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a72      	ldr	r2, [pc, #456]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e00b      	b.n	8000a60 <HAL_RCC_OscConfig+0xd8>
 8000a48:	4b6f      	ldr	r3, [pc, #444]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b6c      	ldr	r3, [pc, #432]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a6b      	ldr	r2, [pc, #428]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d013      	beq.n	8000a90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a68:	f7ff fe9c 	bl	80007a4 <HAL_GetTick>
 8000a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6e:	e008      	b.n	8000a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a70:	f7ff fe98 	bl	80007a4 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b64      	cmp	r3, #100	@ 0x64
 8000a7c:	d901      	bls.n	8000a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e21f      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	4b61      	ldr	r3, [pc, #388]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f0      	beq.n	8000a70 <HAL_RCC_OscConfig+0xe8>
 8000a8e:	e014      	b.n	8000aba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a90:	f7ff fe88 	bl	80007a4 <HAL_GetTick>
 8000a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a96:	e008      	b.n	8000aaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a98:	f7ff fe84 	bl	80007a4 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b64      	cmp	r3, #100	@ 0x64
 8000aa4:	d901      	bls.n	8000aaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e20b      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aaa:	4b57      	ldr	r3, [pc, #348]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f0      	bne.n	8000a98 <HAL_RCC_OscConfig+0x110>
 8000ab6:	e000      	b.n	8000aba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d069      	beq.n	8000b9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ac6:	4b50      	ldr	r3, [pc, #320]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f003 030c 	and.w	r3, r3, #12
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00b      	beq.n	8000aea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	f003 030c 	and.w	r3, r3, #12
 8000ada:	2b08      	cmp	r3, #8
 8000adc:	d11c      	bne.n	8000b18 <HAL_RCC_OscConfig+0x190>
 8000ade:	4b4a      	ldr	r3, [pc, #296]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d116      	bne.n	8000b18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aea:	4b47      	ldr	r3, [pc, #284]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <HAL_RCC_OscConfig+0x17a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d001      	beq.n	8000b02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e1df      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b02:	4b41      	ldr	r3, [pc, #260]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	493d      	ldr	r1, [pc, #244]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b16:	e040      	b.n	8000b9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d023      	beq.n	8000b68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b20:	4b39      	ldr	r3, [pc, #228]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a38      	ldr	r2, [pc, #224]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fe3a 	bl	80007a4 <HAL_GetTick>
 8000b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b32:	e008      	b.n	8000b46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b34:	f7ff fe36 	bl	80007a4 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d901      	bls.n	8000b46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e1bd      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b46:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f0      	beq.n	8000b34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b52:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	4929      	ldr	r1, [pc, #164]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b62:	4313      	orrs	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]
 8000b66:	e018      	b.n	8000b9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a26      	ldr	r2, [pc, #152]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b6e:	f023 0301 	bic.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b74:	f7ff fe16 	bl	80007a4 <HAL_GetTick>
 8000b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b7a:	e008      	b.n	8000b8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b7c:	f7ff fe12 	bl	80007a4 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e199      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f0      	bne.n	8000b7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d038      	beq.n	8000c18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d019      	beq.n	8000be2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000bb2:	4a15      	ldr	r2, [pc, #84]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bba:	f7ff fdf3 	bl	80007a4 <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bc0:	e008      	b.n	8000bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc2:	f7ff fdef 	bl	80007a4 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e176      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x23a>
 8000be0:	e01a      	b.n	8000c18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000be6:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <HAL_RCC_OscConfig+0x280>)
 8000be8:	f023 0301 	bic.w	r3, r3, #1
 8000bec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bee:	f7ff fdd9 	bl	80007a4 <HAL_GetTick>
 8000bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf4:	e00a      	b.n	8000c0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bf6:	f7ff fdd5 	bl	80007a4 <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d903      	bls.n	8000c0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000c04:	2303      	movs	r3, #3
 8000c06:	e15c      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
 8000c08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c0c:	4b91      	ldr	r3, [pc, #580]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1ee      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80a4 	beq.w	8000d6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c26:	4b8b      	ldr	r3, [pc, #556]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10d      	bne.n	8000c4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b88      	ldr	r3, [pc, #544]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a87      	ldr	r2, [pc, #540]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b85      	ldr	r3, [pc, #532]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c4e:	4b82      	ldr	r3, [pc, #520]	@ (8000e58 <HAL_RCC_OscConfig+0x4d0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d118      	bne.n	8000c8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e58 <HAL_RCC_OscConfig+0x4d0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8000e58 <HAL_RCC_OscConfig+0x4d0>)
 8000c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c66:	f7ff fd9d 	bl	80007a4 <HAL_GetTick>
 8000c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c6c:	e008      	b.n	8000c80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c6e:	f7ff fd99 	bl	80007a4 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2b64      	cmp	r3, #100	@ 0x64
 8000c7a:	d901      	bls.n	8000c80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e120      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c80:	4b75      	ldr	r3, [pc, #468]	@ (8000e58 <HAL_RCC_OscConfig+0x4d0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f0      	beq.n	8000c6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d106      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x31a>
 8000c94:	4b6f      	ldr	r3, [pc, #444]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c98:	4a6e      	ldr	r2, [pc, #440]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ca0:	e02d      	b.n	8000cfe <HAL_RCC_OscConfig+0x376>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x33c>
 8000caa:	4b6a      	ldr	r3, [pc, #424]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cae:	4a69      	ldr	r2, [pc, #420]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cb0:	f023 0301 	bic.w	r3, r3, #1
 8000cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8000cb6:	4b67      	ldr	r3, [pc, #412]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cba:	4a66      	ldr	r2, [pc, #408]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cbc:	f023 0304 	bic.w	r3, r3, #4
 8000cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8000cc2:	e01c      	b.n	8000cfe <HAL_RCC_OscConfig+0x376>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	d10c      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x35e>
 8000ccc:	4b61      	ldr	r3, [pc, #388]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cd0:	4a60      	ldr	r2, [pc, #384]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000cd8:	4b5e      	ldr	r3, [pc, #376]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cdc:	4a5d      	ldr	r2, [pc, #372]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ce4:	e00b      	b.n	8000cfe <HAL_RCC_OscConfig+0x376>
 8000ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cea:	4a5a      	ldr	r2, [pc, #360]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8000cf2:	4b58      	ldr	r3, [pc, #352]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cf6:	4a57      	ldr	r2, [pc, #348]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000cf8:	f023 0304 	bic.w	r3, r3, #4
 8000cfc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d015      	beq.n	8000d32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d06:	f7ff fd4d 	bl	80007a4 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d0c:	e00a      	b.n	8000d24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d0e:	f7ff fd49 	bl	80007a4 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e0ce      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d24:	4b4b      	ldr	r3, [pc, #300]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0ee      	beq.n	8000d0e <HAL_RCC_OscConfig+0x386>
 8000d30:	e014      	b.n	8000d5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d32:	f7ff fd37 	bl	80007a4 <HAL_GetTick>
 8000d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d38:	e00a      	b.n	8000d50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d3a:	f7ff fd33 	bl	80007a4 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e0b8      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d50:	4b40      	ldr	r3, [pc, #256]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1ee      	bne.n	8000d3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d105      	bne.n	8000d6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d62:	4b3c      	ldr	r3, [pc, #240]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a3b      	ldr	r2, [pc, #236]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 80a4 	beq.w	8000ec0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d78:	4b36      	ldr	r3, [pc, #216]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d06b      	beq.n	8000e5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d149      	bne.n	8000e20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d8c:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a30      	ldr	r2, [pc, #192]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d98:	f7ff fd04 	bl	80007a4 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000da0:	f7ff fd00 	bl	80007a4 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e087      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69da      	ldr	r2, [r3, #28]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de0:	061b      	lsls	r3, r3, #24
 8000de2:	4313      	orrs	r3, r2
 8000de4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000de6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df8:	f7ff fcd4 	bl	80007a4 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e00:	f7ff fcd0 	bl	80007a4 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e057      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x478>
 8000e1e:	e04f      	b.n	8000ec0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fcba 	bl	80007a4 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e34:	f7ff fcb6 	bl	80007a4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e03d      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e46:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_RCC_OscConfig+0x4cc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f0      	bne.n	8000e34 <HAL_RCC_OscConfig+0x4ac>
 8000e52:	e035      	b.n	8000ec0 <HAL_RCC_OscConfig+0x538>
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_RCC_OscConfig+0x544>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d028      	beq.n	8000ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d121      	bne.n	8000ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d11a      	bne.n	8000ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000e92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d111      	bne.n	8000ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea2:	085b      	lsrs	r3, r3, #1
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d107      	bne.n	8000ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d001      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0d0      	b.n	800108a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d910      	bls.n	8000f18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef6:	4b67      	ldr	r3, [pc, #412]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 020f 	bic.w	r2, r3, #15
 8000efe:	4965      	ldr	r1, [pc, #404]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f06:	4b63      	ldr	r3, [pc, #396]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d001      	beq.n	8000f18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0b8      	b.n	800108a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d020      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f30:	4b59      	ldr	r3, [pc, #356]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4a58      	ldr	r2, [pc, #352]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f48:	4b53      	ldr	r3, [pc, #332]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	4a52      	ldr	r2, [pc, #328]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f54:	4b50      	ldr	r3, [pc, #320]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	494d      	ldr	r1, [pc, #308]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d040      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d107      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	4b47      	ldr	r3, [pc, #284]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d115      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e07f      	b.n	800108a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d107      	bne.n	8000fa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f92:	4b41      	ldr	r3, [pc, #260]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d109      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e073      	b.n	800108a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e06b      	b.n	800108a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fb2:	4b39      	ldr	r3, [pc, #228]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f023 0203 	bic.w	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4936      	ldr	r1, [pc, #216]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fc4:	f7ff fbee 	bl	80007a4 <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fca:	e00a      	b.n	8000fe2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fcc:	f7ff fbea 	bl	80007a4 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e053      	b.n	800108a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 020c 	and.w	r2, r3, #12
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d1eb      	bne.n	8000fcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ff4:	4b27      	ldr	r3, [pc, #156]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d210      	bcs.n	8001024 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001002:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 020f 	bic.w	r2, r3, #15
 800100a:	4922      	ldr	r1, [pc, #136]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001012:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <HAL_RCC_ClockConfig+0x1c4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d001      	beq.n	8001024 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e032      	b.n	800108a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4916      	ldr	r1, [pc, #88]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 800103e:	4313      	orrs	r3, r2
 8001040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d009      	beq.n	8001062 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	490e      	ldr	r1, [pc, #56]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 800105e:	4313      	orrs	r3, r2
 8001060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001062:	f000 f821 	bl	80010a8 <HAL_RCC_GetSysClockFreq>
 8001066:	4602      	mov	r2, r0
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_RCC_ClockConfig+0x1c8>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	490a      	ldr	r1, [pc, #40]	@ (800109c <HAL_RCC_ClockConfig+0x1cc>)
 8001074:	5ccb      	ldrb	r3, [r1, r3]
 8001076:	fa22 f303 	lsr.w	r3, r2, r3
 800107a:	4a09      	ldr	r2, [pc, #36]	@ (80010a0 <HAL_RCC_ClockConfig+0x1d0>)
 800107c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_RCC_ClockConfig+0x1d4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fb4a 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00
 8001098:	40023800 	.word	0x40023800
 800109c:	080012a4 	.word	0x080012a4
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010ac:	b090      	sub	sp, #64	@ 0x40
 80010ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010c0:	4b59      	ldr	r3, [pc, #356]	@ (8001228 <HAL_RCC_GetSysClockFreq+0x180>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d00d      	beq.n	80010e8 <HAL_RCC_GetSysClockFreq+0x40>
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	f200 80a1 	bhi.w	8001214 <HAL_RCC_GetSysClockFreq+0x16c>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_RCC_GetSysClockFreq+0x34>
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d003      	beq.n	80010e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80010da:	e09b      	b.n	8001214 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010dc:	4b53      	ldr	r3, [pc, #332]	@ (800122c <HAL_RCC_GetSysClockFreq+0x184>)
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80010e0:	e09b      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010e2:	4b53      	ldr	r3, [pc, #332]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x188>)
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80010e6:	e098      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001228 <HAL_RCC_GetSysClockFreq+0x180>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80010f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001228 <HAL_RCC_GetSysClockFreq+0x180>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d028      	beq.n	8001150 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001228 <HAL_RCC_GetSysClockFreq+0x180>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	099b      	lsrs	r3, r3, #6
 8001104:	2200      	movs	r2, #0
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	627a      	str	r2, [r7, #36]	@ 0x24
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001110:	2100      	movs	r1, #0
 8001112:	4b47      	ldr	r3, [pc, #284]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x188>)
 8001114:	fb03 f201 	mul.w	r2, r3, r1
 8001118:	2300      	movs	r3, #0
 800111a:	fb00 f303 	mul.w	r3, r0, r3
 800111e:	4413      	add	r3, r2
 8001120:	4a43      	ldr	r2, [pc, #268]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x188>)
 8001122:	fba0 1202 	umull	r1, r2, r0, r2
 8001126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001128:	460a      	mov	r2, r1
 800112a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800112c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800112e:	4413      	add	r3, r2
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001134:	2200      	movs	r2, #0
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	61fa      	str	r2, [r7, #28]
 800113a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800113e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001142:	f7ff f861 	bl	8000208 <__aeabi_uldivmod>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4613      	mov	r3, r2
 800114c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800114e:	e053      	b.n	80011f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001150:	4b35      	ldr	r3, [pc, #212]	@ (8001228 <HAL_RCC_GetSysClockFreq+0x180>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	099b      	lsrs	r3, r3, #6
 8001156:	2200      	movs	r2, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	617a      	str	r2, [r7, #20]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001162:	f04f 0b00 	mov.w	fp, #0
 8001166:	4652      	mov	r2, sl
 8001168:	465b      	mov	r3, fp
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	f04f 0100 	mov.w	r1, #0
 8001172:	0159      	lsls	r1, r3, #5
 8001174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001178:	0150      	lsls	r0, r2, #5
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	ebb2 080a 	subs.w	r8, r2, sl
 8001182:	eb63 090b 	sbc.w	r9, r3, fp
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001192:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001196:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800119a:	ebb2 0408 	subs.w	r4, r2, r8
 800119e:	eb63 0509 	sbc.w	r5, r3, r9
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	00eb      	lsls	r3, r5, #3
 80011ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011b0:	00e2      	lsls	r2, r4, #3
 80011b2:	4614      	mov	r4, r2
 80011b4:	461d      	mov	r5, r3
 80011b6:	eb14 030a 	adds.w	r3, r4, sl
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	eb45 030b 	adc.w	r3, r5, fp
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80011ce:	4629      	mov	r1, r5
 80011d0:	028b      	lsls	r3, r1, #10
 80011d2:	4621      	mov	r1, r4
 80011d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80011d8:	4621      	mov	r1, r4
 80011da:	028a      	lsls	r2, r1, #10
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e2:	2200      	movs	r2, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	60fa      	str	r2, [r7, #12]
 80011e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ec:	f7ff f80c 	bl	8000208 <__aeabi_uldivmod>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4613      	mov	r3, r2
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_RCC_GetSysClockFreq+0x180>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	0c1b      	lsrs	r3, r3, #16
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	3301      	adds	r3, #1
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001208:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800120a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001212:	e002      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_RCC_GetSysClockFreq+0x184>)
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800121a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800121c:	4618      	mov	r0, r3
 800121e:	3740      	adds	r7, #64	@ 0x40
 8001220:	46bd      	mov	sp, r7
 8001222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	00f42400 	.word	0x00f42400
 8001230:	017d7840 	.word	0x017d7840

08001234 <memset>:
 8001234:	4402      	add	r2, r0
 8001236:	4603      	mov	r3, r0
 8001238:	4293      	cmp	r3, r2
 800123a:	d100      	bne.n	800123e <memset+0xa>
 800123c:	4770      	bx	lr
 800123e:	f803 1b01 	strb.w	r1, [r3], #1
 8001242:	e7f9      	b.n	8001238 <memset+0x4>

08001244 <__libc_init_array>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	4d0d      	ldr	r5, [pc, #52]	@ (800127c <__libc_init_array+0x38>)
 8001248:	4c0d      	ldr	r4, [pc, #52]	@ (8001280 <__libc_init_array+0x3c>)
 800124a:	1b64      	subs	r4, r4, r5
 800124c:	10a4      	asrs	r4, r4, #2
 800124e:	2600      	movs	r6, #0
 8001250:	42a6      	cmp	r6, r4
 8001252:	d109      	bne.n	8001268 <__libc_init_array+0x24>
 8001254:	4d0b      	ldr	r5, [pc, #44]	@ (8001284 <__libc_init_array+0x40>)
 8001256:	4c0c      	ldr	r4, [pc, #48]	@ (8001288 <__libc_init_array+0x44>)
 8001258:	f000 f818 	bl	800128c <_init>
 800125c:	1b64      	subs	r4, r4, r5
 800125e:	10a4      	asrs	r4, r4, #2
 8001260:	2600      	movs	r6, #0
 8001262:	42a6      	cmp	r6, r4
 8001264:	d105      	bne.n	8001272 <__libc_init_array+0x2e>
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	f855 3b04 	ldr.w	r3, [r5], #4
 800126c:	4798      	blx	r3
 800126e:	3601      	adds	r6, #1
 8001270:	e7ee      	b.n	8001250 <__libc_init_array+0xc>
 8001272:	f855 3b04 	ldr.w	r3, [r5], #4
 8001276:	4798      	blx	r3
 8001278:	3601      	adds	r6, #1
 800127a:	e7f2      	b.n	8001262 <__libc_init_array+0x1e>
 800127c:	080012bc 	.word	0x080012bc
 8001280:	080012bc 	.word	0x080012bc
 8001284:	080012bc 	.word	0x080012bc
 8001288:	080012c0 	.word	0x080012c0

0800128c <_init>:
 800128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128e:	bf00      	nop
 8001290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001292:	bc08      	pop	{r3}
 8001294:	469e      	mov	lr, r3
 8001296:	4770      	bx	lr

08001298 <_fini>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr
